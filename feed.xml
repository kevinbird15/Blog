<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://impartialderivative.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://impartialderivative.com/" rel="alternate" type="text/html" /><updated>2020-09-04T01:10:34-05:00</updated><id>https://impartialderivative.com/feed.xml</id><title type="html">Impartial Derivative</title><subtitle>This blog is to explore different technical concepts that interest me.  The goal is to take my readers along for the ride as I learn whatever topic catches my attention</subtitle><entry><title type="html">The No Second Turkey Learning Concept</title><link href="https://impartialderivative.com/no%20second%20turkey/2020/09/04/The-No-Second-Turkey-Learning-Concept.html" rel="alternate" type="text/html" title="The No Second Turkey Learning Concept" /><published>2020-09-04T00:00:00-05:00</published><updated>2020-09-04T00:00:00-05:00</updated><id>https://impartialderivative.com/no%20second%20turkey/2020/09/04/The-No-Second-Turkey-Learning-Concept</id><content type="html" xml:base="https://impartialderivative.com/no%20second%20turkey/2020/09/04/The-No-Second-Turkey-Learning-Concept.html">&lt;p&gt;When I reflect on learning processes that work for me, writing out my thought process comes pretty high on the list for me.  A second thing is to re-explain the concept in my own words.  Blog posts that I tag as “no second turkey” are going to be as much as possible, unaltered sessions of my thought process.  In the past, everything I end up sharing is a polished version of my code and the truth of the matter is, there are a lot of ugly steps along the way that never get published which can be really intimidating if you don’t see the steps of the journey.&lt;/p&gt;

&lt;p&gt;In cooking shows, the host has a perfect looking turkey ready to pull out of the oven which is why I’m calling this the ‘no second turkey’ approach.  If things don’t go well, we may end up with a burnt turkey or two.  But we will learn something along the way and hopefully it will be more focused on coding and ideas around fastai rather than cooking!&lt;/p&gt;

&lt;p&gt;I know some readers aren’t going to care about the process, but may still want to know what I learned during my journey.  For this, I will start each blog with an executive summary section that will summarize anything interesting that I find along the way.  These won’t include any code, but may link to sections in the notebook that will provide more color.  This goal of this section is to be simple enough that anybody could understand the takeaways.&lt;/p&gt;</content><author><name></name></author><summary type="html">When I reflect on learning processes that work for me, writing out my thought process comes pretty high on the list for me. A second thing is to re-explain the concept in my own words. Blog posts that I tag as “no second turkey” are going to be as much as possible, unaltered sessions of my thought process. In the past, everything I end up sharing is a polished version of my code and the truth of the matter is, there are a lot of ugly steps along the way that never get published which can be really intimidating if you don’t see the steps of the journey.</summary></entry><entry><title type="html">High Level Haha Architecture</title><link href="https://impartialderivative.com/2019/06/26/High-Level-Haha-Architecture.html" rel="alternate" type="text/html" title="High Level Haha Architecture" /><published>2019-06-26T00:00:00-05:00</published><updated>2019-06-26T00:00:00-05:00</updated><id>https://impartialderivative.com/2019/06/26/High-Level-Haha-Architecture</id><content type="html" xml:base="https://impartialderivative.com/2019/06/26/High-Level-Haha-Architecture.html">&lt;p&gt;Hiromi (&lt;a href=&quot;https://medium.com/@hiromi_suenaga&quot;&gt;Medium&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/hiromi_suenaga&quot;&gt;Twitter&lt;/a&gt;) and I recently competed in the&lt;a href=&quot;https://www.fing.edu.uy/inco/grupos/pln/haha/&quot;&gt; Haha 2019 Humor Detection challenge&lt;/a&gt; and received a second place finish on classification (predicting whether this tweet was intended to be humor by the author) and a third place finish on regression (predicting an average funniness score value for a tweet in a 5-star ranking).&lt;/p&gt;

&lt;p&gt;This post is written by both Hiromi and I and will contain a high-level explanation of our approach. Hopefully, this is something that people find value in and if there are any parts that aren’t clear, please reach out to either of us on Twitter or the Fastai forums and we will clarify our approach!&lt;/p&gt;

&lt;h4 id=&quot;data-preprocessing&quot;&gt;Data Preprocessing&lt;/h4&gt;

&lt;p&gt;First, a tokenizer was created using &lt;a href=&quot;https://github.com/google/sentencepiece&quot;&gt;SentencePiece&lt;/a&gt; which would chop the tweets into small word-fragments called tokens. The SentencePiece model was trained on a set of 500k tweets downloaded from Twitter using &lt;a href=&quot;https://www.tweepy.org/&quot;&gt;Tweepy&lt;/a&gt;. SentencePiece allows users to fine-tune its underlying model and adjust to better tokenize the corpus provided. The SentencePiece tokenizer was then injected into the &lt;a href=&quot;https://docs.fast.ai/data_block.html&quot;&gt;Fastai Data Block API&lt;/a&gt;. The Data Block API orchestrates the preprocessing, organizing, and grouping the data so it is in the form (cleverly named “databunch”) appropriate to be fed into a neural network . By preprocessing, we mean &lt;a href=&quot;https://docs.fast.ai/text.data.html#TokenizeProcessor&quot;&gt;tokenizing&lt;/a&gt; and &lt;a href=&quot;https://docs.fast.ai/text.data.html#NumericalizeProcessor&quot;&gt;numericalizing&lt;/a&gt; each token because neural networks take numbers as inputs, not text/tokens. To numericalize tokens, we needed a vocabulary which maps tokens to numbers. Our vocab consists of approximately 30k tokens that appeared in the Haha 2019 corpus. After running our data through the Data Block API, we had a training set with 90% of our data, a validation set with the remaining 10%, and corresponding data loaders.&lt;/p&gt;

&lt;h4 id=&quot;language-model-generation&quot;&gt;Language Model Generation&lt;/h4&gt;

&lt;p&gt;In order to give the model a better starting point, we trained a language model. A language model predicts what the next word would be given preceding few words. The purpose is not to create something that can generate a sentence, but rather to gain a basic understanding of the language itself. This information is stored in the word embeddings and the model’s weights and biases which can then be transferred to the classifier and regressor to give them a much better base for the problems they are meant to solve.&lt;/p&gt;

&lt;h4 id=&quot;classifier-architecture&quot;&gt;Classifier Architecture&lt;/h4&gt;

&lt;p&gt;We ensembled five different models for our classification task:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A forward &lt;a href=&quot;https://docs.fast.ai/text.models.html#AWD_LSTM&quot;&gt;AWD-LSTM&lt;/a&gt; using fastai’s &lt;a href=&quot;https://arxiv.org/pdf/1801.06146.pdf&quot;&gt;ULMFiT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A backward AWD-LSTM&lt;/li&gt;
  &lt;li&gt;A pre-trained BERT model (bert-base-multilingual-cased) based on &lt;a href=&quot;https://github.com/huggingface/pytorch-pretrained-BERT&quot;&gt;this repo&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Another BERT pretrained model (bert-base-multilingual-uncased) where everything is lowercase.&lt;/li&gt;
  &lt;li&gt;Naïve Bayes - Support Vector Machine (NBSVM). This was a technique that was borrowed from &lt;a href=&quot;https://www.kaggle.com/jhoward/nb-svm-strong-linear-baseline&quot;&gt;Jeremy Howard’s Kaggle kernel&lt;/a&gt; and his fantastic &lt;a href=&quot;https://www.youtube.com/watch?v=37sFIak42Sc&amp;amp;feature=youtu.be&amp;amp;t=3745&quot;&gt;lecture&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;regressor-architecture&quot;&gt;Regressor Architecture&lt;/h4&gt;

&lt;p&gt;Our regressor was made up of the first four models from above. The only difference was that the output of the final linear layer is just one number instead of two - a number indicating the funniness score. We initially fed in only the tweets the classifier determined to be humorous into the regressor. The intuition here was not bombard the regressor with not funny tweets (which was 61.4% the training data) and really hone in on the score itself. After experimenting, our initial hypothesis turned out to be false. The regressor trained much better with not-funny tweets included.&lt;/p&gt;

&lt;h4 id=&quot;generating-final-results&quot;&gt;Generating Final Results&lt;/h4&gt;

&lt;p&gt;The output of the classifier tells the percent likelihood of a tweet being humorous. The competition’s sample submission file indicated to submit the binary entry of whether it is funny (1) or not (0). The straightforward way to do this is to set the threshold to 50% and anything below it becomes 0; 1 otherwise. We instead examined the validation set predictions to determine the threshold that would maximize the F1-score which turned out to be lower than 0.5 (~0.45). For our final run, we used the entire dataset for training so we kept the predetermined threshold. Below is a graph of what we based our decision on:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\images\2019-06-26-High-Level-Haha-Architecture\Threshold_Finder.png&quot; alt=&quot;Threshold_Finder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another tweak we did was to take into account the output of the regressor for the classification prediction. If the regressor determined a funniness score of less than 1, we marked the tweet to be not funny (i.e. 0). Looking back, we feel that there was room for improvement here. Perhaps we could have taken into account the classifier output a little bit more by adding yet another threshold. Finally, we clipped the regressor predictions so that they fell between 0 and 5.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;This competition was a wonderful experience and a great learning opportunity. The fastai community has always supported us when we are stuck, pushed us to do more, and gave us a deeper understanding of the materials.&lt;/p&gt;

&lt;p&gt;A few things that stuck out to us during this competition were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ensembling of the output of many different models is important.&lt;/li&gt;
  &lt;li&gt;Change just one thing at a time and don’t make any assumptions.&lt;/li&gt;
  &lt;li&gt;Using pre-trained language model is becoming much easier thanks to &lt;a href=&quot;https://www.fast.ai/&quot;&gt;fastai&lt;/a&gt;, ULMFit, and BERT.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;acknowledgments&quot;&gt;Acknowledgments&lt;/h4&gt;

&lt;p&gt;We would like to thank &lt;a href=&quot;https://twitter.com/jeremyphoward&quot;&gt;Jeremy Howard&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/math_rachel&quot;&gt;Rachel Thomas&lt;/a&gt;, and the entire Fast.ai team for providing a world-class education to many aspiring ML practitioner around the world.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Haha 2019 Lessons Learned</title><link href="https://impartialderivative.com/2019/06/11/Haha-2019-Lessons-Learned.html" rel="alternate" type="text/html" title="Haha 2019 Lessons Learned" /><published>2019-06-11T00:00:00-05:00</published><updated>2019-06-11T00:00:00-05:00</updated><id>https://impartialderivative.com/2019/06/11/Haha-2019-Lessons-Learned</id><content type="html" xml:base="https://impartialderivative.com/2019/06/11/Haha-2019-Lessons-Learned.html">&lt;p&gt;I recently competed in the &lt;a href=&quot;https://competitions.codalab.org/competitions/22194&quot;&gt;Haha 2019 Competition&lt;/a&gt; and ended up getting second place on predicting whether a tweet would be funny or not and third place on predicting how funny the tweet would be.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-06-11-Haha-2019-Lessons-Learned/clas_ranking.png&quot; alt=&quot;clas_ranking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I wanted to share some of my lessons learned from this competition to hopefully prevent somebody else (maybe even my future self) from making the same mistakes.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt; to put my code into a Github Repo&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt; is the only way that I have ever added files to a project and I learned that it is a terrible way to add files to a Github repo.  Basically this says to add every file in your current directory recursively into your Github repo.  I’m sure if you know what you are doing, this isn’t an issue, but I did not.  This was my attempt to put a starting repo into Github and then I was going to figure out what I actually wanted up there and take the rest down.  What ended up happening instead was I added all of the garbage files and every big file into my repo.  A better approach would have been to start small and only add the files that I definitely wanted added.  This for me would have been the .ipynb files and not a whole lot else.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Creating a new databunch every time I reran the notebook&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;One mistake that I made that became more obvious as the competition got closer to completion was creating a new databunch every time I ran the notebook.  The problem with doing this is that not only does it waste time, it also changes up the validation set every time.  This is great when you are wanting to make sure that your model is generalizable, but it is less ideal when trying to test whether a change is actually helpful and your score goes up slightly when looking at your validation scores.  Saving the databunch will help you maintain your sanity when trying slight tweaks and improvements.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not saving things required for reproducibility&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;This ended up being one of my less impactful issues, but it could have been a lot bigger deal.  I didn’t realize that not only did I need to save the model to reload the model, I also needed to save the vocab associated with the databunch.  I put it lower than the databunch mistake because if I would have done that, it would have made this less important.&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#Load vocab in fastai
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp_vocab&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vocab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30k_Haha.vocab&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
&lt;span class=&quot;c1&quot;&gt;#Save vocab in fastai
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp_vocab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30k_Haha.vocab&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not keeping the Github Repo clean&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;This may seem similar to #1 and it is similar, but it is a different issue.  Where did my submissions go? Where did my notebooks live?  Where did my test notebooks go?  All of these were in my root directory.  This isn’t an issue when you have one notebook and one dataset, but it will grow.  Just set your structure up at the beginning and have a directory for test notebooks, solid notebooks, data, models, and submissions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not Auto-dating Everything that saves&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;When I saved things, I manually changed the names of everything.  This led to some files being overwritten that I would have liked to have had.  I also would have used this in #4 to not only put them in the directories I mentioned, but also add a date file to those folders so I could have more organization.&lt;/p&gt;

    &lt;p&gt;I would do something like this next time and run it in the first cell of the notebook so that all of the cells from that run would be timestamped together.&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timetuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not Trying Blah&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;One quote that I first heard from Jeremy Howard during his fastai deep learning course is that if you are wondering if blah is a good idea, to try blah and see.  Until you test out an idea it could be both the best and worst idea you’ve ever had and you won’t know which it is until you test it out.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not changing hyper-parameters&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;It took me way too long to start modifying the hyper-parameters when working on this problem.  Change everything and see how it helps or hurts things!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for reading and hopefully there is something useful here for you.  My idea is to do a recap like this after each competition and hopefully over time it makes me a better coder and practitioner.  My next blog post is going to be a walkthrough of Hiromi and my approach to this competition because even with all of the mistakes I made, we ended up with a pretty solid classifier and regressor at the end of the day.&lt;/p&gt;</content><author><name></name></author><summary type="html">I recently competed in the Haha 2019 Competition and ended up getting second place on predicting whether a tweet would be funny or not and third place on predicting how funny the tweet would be.</summary></entry></feed>